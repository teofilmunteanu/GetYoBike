@page "/details/{bikeTypeNr:int}"


@inject IJSRuntime JsRuntime
@using GetYoBike.Client.Services;
@using GetYoBike.Shared.Models;
@using System.Text.Json;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject Services.RentService RentSvc

@*<header>
    <b><b style="color:#6594EF;">Rent City Bike</b> - Details</b>
</header>*@
<Header Color="#6594EF" Title="Rent City Bike" Subtitle="Details"/>
<div id="grid-container">
    <div class="left">

        <form action="" method="post">
            <div id="div-container">
                <div class="lastName-grid">
                    <label for="Last Name" class="formLabel">Last Name</label>
                    <br />
                    <input type="text" name="Last Name" class="lastName" @bind="LastName">
                </div>
                <div class="firstName-grid">
                    <label for="first Name" class="formLabel">First Name</label>
                    <br />
                    <input type="text" name="First Name" class="firstName" @bind="FirstName">
                </div>
                <div class="email-grid">
                    <label for="email" class="formLabel">Email</label>
                    <br />
                    <input type="email" name="email" class="email" @bind="Email">
                </div>
                <div class="age-grid">
                    <label for="Age" class="formLabel">Age</label>
                    <br />
                    <input type="text" name="Age" class="age" @bind="Age">
                </div>
                <div class="dateStart-grid">
                    <label for="rent" class="formLabel">Start Date</label>
                    <br />
                    <input type="date" name="StartDate" class="rentDate"
                           @bind="RentStartDate" @bind:after="SetPrice" />
                </div>
                <div class="timeStart-grid">
                    <label for="duration" class="formLabel">Start Time</label>
                    <br />
                    <input type="time" name="StartTime" class="rentTime" placeholder="hh"
                           @bind="RentStartTime" @bind:after="SetPrice">
                </div>
                <div class="dateEnd-grid">
                    <label for="rent" class="formLabel">End Date</label>
                    <br />
                    <input type="date" name="EndDate" class="rentDate"
                           @bind="RentEndDate" @bind:after="SetPrice" />
                </div>
                <div class="timeEnd-grid">
                    <label for="duration" class="formLabel">End Time</label>
                    <br />
                    <input type="time" name="EndTime" class="rentTime" placeholder="hh"
                           @bind="RentEndTime" @bind:after="SetPrice">
                </div>
                <br />
            </div>
        </form>
    </div>

    <div class="right-top">
        <img src="@SelectedImagePath" class="img-div">
    </div>

    <div class="right-bottom">
        <total class="total">
            <span>Total: @Price lei</span>
        </total>
        <button class="button" style="vertical-align:middle" @onclick="SendToCheckout">
            <span>Checkout </span>
        </button>
    </div>
</div>

@code {
    [Parameter]
    public int bikeTypeNr { get; set; } = 0;

    public string SelectedImagePath { get; set; } = "";
    public decimal Price { get; set; } = 0;
    private decimal pricePerH { get; set; }

    public DateOnly RentStartDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    public DateOnly RentEndDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    public TimeOnly RentStartTime { get; set; } = TimeOnly.FromDateTime(DateTime.Now);
    public TimeOnly RentEndTime { get; set; } = TimeOnly.FromDateTime(DateTime.Now);
    public string LastName { get; set; } = "";
    public string FirstName { get; set; } = "";
    public string Email { get; set; } = "";
    public int Age { get; set; }
    
    DateTime dateTimeStart;
    DateTime dateTimeEnd;

    protected override async Task OnInitializedAsync()
    {
        switch (bikeTypeNr)
        {
            case 1:
                SelectedImagePath = "assets/rentCityBike.png";
                break;
            case 2:
                SelectedImagePath = "assets/rentMountainBike.png";
                break;
        }

        BikeTypeModel bikeType = await Http.GetFromJsonAsync<BikeTypeModel>("api/BikeTypes/" + bikeTypeNr);
        pricePerH = bikeType.Price;
    }

    private void SetPrice()
    {
        dateTimeStart = RentStartDate.ToDateTime(new TimeOnly(RentStartTime.Hour, RentStartTime.Minute, 0));
        dateTimeEnd = RentEndDate.ToDateTime(new TimeOnly(RentEndTime.Hour, RentEndTime.Minute, 0));
        RentSvc.SetDuration(dateTimeStart, dateTimeEnd);

        RentSvc.CalculatePrice(RentSvc.DurationHours, pricePerH);
        Price = RentSvc.Price;
    }

    private async void SendToCheckout()
    {
        string message = "";

        if (RentSvc.DurationHours >= RentService.MinRentDuration)
        {
            //if email already used, assign this rent 
            UserModel user = new UserModel
                {
                    //Email = this.Email,
                    //LastName = this.LastName,
                    //FirstName = this.FirstName,
                    //Age = this.Age
                    Email = "mock@email.com",
                    LastName = "last name",
                    FirstName = "first name",
                    Age = 21
                };

            var response = await Http.PostAsJsonAsync("/api/Users/", user);

            if (response.IsSuccessStatusCode)
            {
                //string startDateString = RentStartDate.ToString("yyyy-MM-dd");
                //string endDateString = RentEndDate.ToString("yyyy-MM-dd");
                //string startTimeString = RentStartTime.ToString();
                //string endTimeString = RentEndTime.ToString();
                string startDateTimeString = dateTimeStart.ToString("yyyy-MM-dd-HH-mm");
                string endDateTimeString = dateTimeEnd.ToString("yyyy-MM-dd-HH-mm");

                var responseContent = response.Content.ReadAsStringAsync().Result;
                var createdUser = JsonSerializer.Deserialize<UserModel>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                //NavManager.NavigateTo($"/checkout?userId={createdUser.Id}&type={bikeTypeNr}&startDate={startDateString}&endDate={endDateString}&startTime={startTimeString}&endTime={endTimeString}");
                NavManager.NavigateTo($"/checkout?userId={createdUser.Id}&type={bikeTypeNr}&startDate={startDateTimeString}&endDate={endDateTimeString}");
            }
            else
            {
                message = response.Content.ReadAsStringAsync().Result;
            }
        }
        else
        {
            message = "Rent duration must be at least one hour";
        }

        if(message != "")
        {
            await JsRuntime.InvokeVoidAsync("alert", message);
        }
        
    }
}
