@page "/details/{BikeType}"


@inject IJSRuntime JsRuntime
@using GetYoBike.Client.Services;
@using GetYoBike.Shared.Models;
@using System.Text.Json;
@using System.Net;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject Services.RentService RentSvc


<Header Color="@BikeTypeColor" Title="@BikeTypeTitle" Subtitle="Details" />

<div id="grid-container">
    <div class="left">

        <form action="" method="post">
            <div id="div-container">
                <div class="lastName-grid">
                    <label for="Last Name" class="formLabel">Last Name</label>
                    <br />
                    <input type="text" name="Last Name" class="lastName" @bind="LastName">
                </div>
                <div class="firstName-grid">
                    <label for="first Name" class="formLabel">First Name</label>
                    <br />
                    <input type="text" name="First Name" class="firstName" @bind="FirstName">
                </div>
                <div class="email-grid">
                    <label for="email" class="formLabel">Email</label>
                    <br />
                    <input type="email" name="email" class="email" @bind="Email">
                </div>
                <div class="age-grid">
                    <label for="Age" class="formLabel">Age</label>
                    <br />
                    <input type="text" name="Age" class="age" @bind="Age">
                </div>
                <div class="dateStart-grid">
                    <label for="rent" class="formLabel">Start Date</label>
                    <br />
                    <input type="date" name="StartDate" class="rentDate"
                           @bind="RentStartDate" @bind:after="@(()=>SetDatesAndPrice(RentStartDate, RentStartTime, RentEndDate, RentEndTime))" />
                </div>
                <div class="timeStart-grid">
                    <label for="duration" class="formLabel">Start Time</label>
                    <br />
                    <input type="time" name="StartTime" class="rentTime" placeholder="hh"
                           @bind="RentStartTime" @bind:after="@(()=>SetDatesAndPrice(RentStartDate, RentStartTime, RentEndDate, RentEndTime))">
                </div>
                <div class="dateEnd-grid">
                    <label for="rent" class="formLabel">End Date</label>
                    <br />
                    <input type="date" name="EndDate" class="rentDate"
                           @bind="RentEndDate" @bind:after="@(()=>SetDatesAndPrice(RentStartDate, RentStartTime, RentEndDate, RentEndTime))" />
                </div>
                <div class="timeEnd-grid">
                    <label for="duration" class="formLabel">End Time</label>
                    <br />
                    <input type="time" name="EndTime" class="rentTime" placeholder="hh"
                           @bind="RentEndTime" @bind:after="@(()=>SetDatesAndPrice(RentStartDate, RentStartTime, RentEndDate, RentEndTime))">
                </div>
                <br />
            </div>
        </form>
    </div>

    <div class="right-top">
        <img src="@SelectedImagePath" class="img-div">
    </div>

    <div class="right-bottom">
        <div class="checkoutItemsContainer">
            <total class="total">
                <span>Total: @Price lei</span>
            </total>
            <button class="button" @onclick="SendToCheckout">
                <span>Checkout </span>
            </button> 
        </div>
    </div>
</div>

@code {
    //CHANGE TO STRING AND SEARCH BY TYPE NAME (??)
    [Parameter]
    public string BikeType { get; set; } = "";

    public decimal Price { get; set; } = 0;
    public string SelectedImagePath { get; set; } = "";
    public string BikeTypeColor { get; set; } = "";
    public string BikeTypeTitle { get; set; } = "";

    public string LastName { get; set; } = "";
    public string FirstName { get; set; } = "";
    public string Email { get; set; } = "";
    public int Age { get; set; }

    public DateOnly RentStartDate { get; set; }
    public DateOnly RentEndDate { get; set; } 
    public TimeOnly RentStartTime { get; set; }
    public TimeOnly RentEndTime { get; set; }

    private decimal pricePerH;
    DateTime dateTimeStart;
    DateTime dateTimeEnd;


    protected override void OnInitialized()
    {
        LoadSessionForm();
    }

    protected override async Task OnInitializedAsync()
    {
        RentStartDate = DateOnly.FromDateTime(DateTime.Now);
        RentEndDate = DateOnly.FromDateTime(DateTime.Now);
        RentStartTime = TimeOnly.FromDateTime(DateTime.Now);
        RentEndTime = TimeOnly.FromDateTime(DateTime.Now);

        if (Enum.TryParse(BikeType, out TypesModel bikeType))
        {
            switch (bikeType)
            {
                case TypesModel.city:
                    SelectedImagePath = "assets/rentCityBike.png";
                    BikeTypeTitle = "Rent City Bike";
                    BikeTypeColor = "#6594EF";
                    break;
                case TypesModel.mountain:
                    SelectedImagePath = "assets/rentMountainBike.png";
                    BikeTypeTitle = "Rent Mountain Bike";
                    BikeTypeColor = "#DB7A50";
                    break;
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "This bike type doesn't exist!");
        }

        try
        {
            await FetchBikeTypeData();
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
        
    }

    private async Task FetchBikeTypeData()
    {
        var bikeTypeResponse = await Http.GetAsync("api/BikeTypes/" + BikeType);
        if (bikeTypeResponse.IsSuccessStatusCode)
        {
            string bikeTypeResponseJson = await bikeTypeResponse.Content.ReadAsStringAsync();
            BikeTypeModel? bikeType = JsonSerializer.Deserialize<BikeTypeModel>(bikeTypeResponseJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            if (bikeType != null)
            {
                pricePerH = bikeType.Price;
                await SetDatesAndPrice(RentStartDate, RentStartTime, RentEndDate, RentEndTime);
            }
            else
            {
                throw new Exception("A problem occured during deserialization of the bike type.");
            }
        }
        else
        {
            throw new Exception("A problem occured during bike type retrieval! Cannot set price.");
        }
    }

    private async Task SetDatesAndPrice(DateOnly rentStartDate, TimeOnly rentStartTime, DateOnly rentEndDate, TimeOnly rentEndTime)
    {
        dateTimeStart = RentStartDate.ToDateTime(new TimeOnly(RentStartTime.Hour, RentStartTime.Minute, 0));
        dateTimeEnd = RentEndDate.ToDateTime(new TimeOnly(RentEndTime.Hour, RentEndTime.Minute, 0));
        RentSvc.SetDuration(dateTimeStart, dateTimeEnd);

        RentSvc.CalculatePrice(RentSvc.DurationHours, pricePerH);
        Price = RentSvc.Price;

        await JsRuntime.InvokeVoidAsync("sessionStorage.setItem", "price", JsonSerializer.Serialize(Price));
    }

    private async void SaveSessionForm(UserModel user, DateTime StartDateTime, DateTime EndDateTime)
    {
        await JsRuntime.InvokeVoidAsync("sessionStorage.setItem", "user", JsonSerializer.Serialize(user));
        await JsRuntime.InvokeVoidAsync("sessionStorage.setItem", "startDateTime", JsonSerializer.Serialize(StartDateTime));
        await JsRuntime.InvokeVoidAsync("sessionStorage.setItem", "endDateTime", JsonSerializer.Serialize(EndDateTime));
    }

    private async void LoadSessionForm()
    {
        string rentUser_json = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
        string rentDateStart_json = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "startDateTime");
        string rentDateEnd_json = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "endDateTime");

        if (!(string.IsNullOrEmpty(rentUser_json) || string.IsNullOrEmpty(rentDateStart_json) || string.IsNullOrEmpty(rentDateEnd_json)))
        {
            UserModel? sessionUser = JsonSerializer.Deserialize<UserModel>(rentUser_json);
            if(sessionUser != null)
            {
                Email = sessionUser.Email;
                LastName = sessionUser.LastName;
                FirstName = sessionUser.FirstName;
                Age = sessionUser.Age;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "A problem occured during deserialization of the user data.");
            }

            DateTime sessionDateTimeStart = JsonSerializer.Deserialize<DateTime>(rentDateStart_json);
            DateTime sessionDateTimeEnd = JsonSerializer.Deserialize<DateTime>(rentDateEnd_json);
            RentStartDate = DateOnly.FromDateTime(sessionDateTimeStart);
            RentStartTime = TimeOnly.FromDateTime(sessionDateTimeStart);
            RentEndDate = DateOnly.FromDateTime(sessionDateTimeEnd);
            RentEndTime = TimeOnly.FromDateTime(sessionDateTimeEnd);
        }
    }

    private async void SendToCheckout()
    {
        string message = "";

        if (RentSvc.DurationHours >= RentService.MinRentDuration)
        {
            UserModel? user = null;

            try{
                user = await Http.GetFromJsonAsync<UserModel>("api/Users/findUserByEmail/" + this.Email);
            }
            catch(HttpRequestException e)
            {
                if(e.StatusCode == HttpStatusCode.NotFound)
                {
                    UserModel userForm = new UserModel
                        {
                            Email = this.Email,
                            LastName = this.LastName,
                            FirstName = this.FirstName,
                            Age = this.Age
                        };

                    var response = await Http.PostAsJsonAsync("/api/Users/", userForm);
                    var responseContent = await response.Content.ReadAsStringAsync();
                    user = JsonSerializer.Deserialize<UserModel>(responseContent, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });

                    if (!response.IsSuccessStatusCode)
                    {
                        message = await response.Content.ReadAsStringAsync();
                    }
                }
                else
                {
                    message = e.Message;
                }
            }
            catch (Exception e)
            {
                message = e.Message;
            }

            if (user != null)
            {
                string startDateTimeString = dateTimeStart.ToString("yyyy-MM-dd-HH-mm");
                string endDateTimeString = dateTimeEnd.ToString("yyyy-MM-dd-HH-mm");

                SaveSessionForm(user, dateTimeStart, dateTimeEnd);

                NavManager.NavigateTo($"/checkout?userId={user.Id}&type={BikeType}&startDate={startDateTimeString}&endDate={endDateTimeString}");
            }
            else
            {
                message = "A problem occured during user assignment";
            }
        }
        else
        {
            message = "Rent duration must be at least" 
                + RentService.MinRentDuration 
                + (RentService.MinRentDuration == 1? " hour" : " hours");
        }

        if(message != "")
        {
            await JsRuntime.InvokeVoidAsync("alert", message);
        }
    }
}
