@page "/rents"

@using GetYoBike.Shared.Models;
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject NavigationManager NavManager

<header>
    <b>Your Rents</b>
    <span></span>
    <span></span>
    <div>
        <button class="edit-button">Edit rent</button>&nbsp;<input type="number" placeholder="Enter Rent PIN">
    </div>
</header>

<div class="wraper">
    @foreach (var rent in rents)
    {
        <div class="card">
            <div>
                <img src="/assets/buildings.png"> 
            </div>
            <div class="card-info">

                <div>Rent Start Date</div>
                <div>@rent.RentStartDate.ToShortDateString()</div>
            </div>
            <div class="card-info">

                <div>Duration</div>
                <div>@rent.RentHoursDuration</div>
            </div>
            <div class="card-info">

                <div>Price</div>
                <div>@rent.Price</div>
            </div>
            <div>
                <button>Edit</button> 
            </div>
            <div>
                <input type="number" placeholder="Enter Rent PIN"> 
            </div>
        </div>
    }
    

</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string Email { get; set; } = "";

    public List<RentModel> rents { get; set; } = new List<RentModel>();

    public string message = "";

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/Users/FindUserByMail/" + Email);
        if (response.IsSuccessStatusCode)
        {
            UserModel user = await Http.GetFromJsonAsync<UserModel>("api/Users/FindUserByMail/" + Email);
            rents = await Http.GetFromJsonAsync<List<RentModel>>("api/Rents/GetRentsOfUser/" + user.Id);
        }
        else if(response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            message = "No rents found";
        }
        else
        {
            message = response.Content.ReadAsStringAsync().Result;
        }
        
        if (message != "")
        {
            await JsRuntime.InvokeVoidAsync("alert", message);
        }
    }
}
