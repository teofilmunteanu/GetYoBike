@page "/thanks"
@using System.Text.Json;
@using GetYoBike.Shared.Models;
@using System.Globalization;
@inject Services.RentService RentSvc
@inject IJSRuntime JsRuntime
@inject HttpClient Http


<div class="wraper">
    <div class="card">
        <div>
            <b>Thank you for renting a <span style="color:@TypeColor">@BikeTypeString</span> Bicycle!</b>
        </div><br><br>
        <div>
            To edit the renting detals, please use the following PIN after <br> accessing your rents list on the homepage through the email.
        </div><br>
        <div class="box">
            <div>Rent Made on Email: <span class="email">@Email</span></div><br>
            <div>Rent Edit PIN: <span class="pin">@EditPIN</span></div>
        </div>
        
        <button class="home-button" onclick="window.location.href='/';">Home</button>
       
    </div>

</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public int BikeTypeNr { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public int RentId { get; set; }


    public string BikeTypeString { get; set; } = "";
    public string TypeColor { get; set; } = "";

    public string EditPIN { get; set; } = "";
    public string Email { get; set; } = "";



    private async Task ClearSessionData()
    {
        await JsRuntime.InvokeVoidAsync("sessionStorage.removeItem", "user");
        await JsRuntime.InvokeVoidAsync("sessionStorage.removeItem", "startDateTime");
        await JsRuntime.InvokeVoidAsync("sessionStorage.removeItem", "endDateTime");
    }

    protected override async Task OnInitializedAsync()
    {
        if(BikeTypeNr == 1)
        {
            BikeTypeString = "City";
            TypeColor = "#6594EF";
        }
        else if(BikeTypeNr == 2)
        {
            BikeTypeString = "Mountain";
            TypeColor = "#DB7A50";
        }
        else
        {
            BikeTypeString = "Default";
            TypeColor = "white";
        }

        try
        {
            RentModel? rent = await Http.GetFromJsonAsync<RentModel>("api/Rents/" + RentId);
            UserModel? user = await Http.GetFromJsonAsync<UserModel>("api/Users/" + rent.UserID);
            EditPIN = rent.EditPIN;
            Email = user.Email;
        }
        catch(Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }

        await ClearSessionData();
        //If it's the first time the page is loaded, CurrentRent wouldn't be null
        //if (RentSvc.CurrentRent != null)
        //{
        //    string startDateTimeString = RentSvc.CurrentRent.StartDate.ToString("yyyy-MM-dd-HH-mm");
        //    string endDateTimeString = RentSvc.CurrentRent.EndDate.ToString("yyyy-MM-dd-HH-mm");
        //    int userId = RentSvc.CurrentRent.UserID;
        //    int bikeId = RentSvc.CurrentRent.BikeID;

        //    //search rent by BikeId, UserId, startdate, enddate
        //    RentModel rent = await Http.GetFromJsonAsync<RentModel>("api/Rents/getRentByDates?userId=" + userId + "&bikeId=" + bikeId + "&startDateTime=" + startDateTimeString + "&endDateTime=" + endDateTimeString);
        //    UserModel user = await Http.GetFromJsonAsync<UserModel>("api/Users/" + rent.UserID);

        //    EditPIN = rent.EditPIN;
        //    Email = user.Email;

        //    await JsRuntime.InvokeVoidAsync("localStorage.setItem", "rentEditPIN", JsonSerializer.Serialize(rent.EditPIN));
        //    await JsRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", JsonSerializer.Serialize(user.Email));
        //}
        //else
        //{
        //    string rentEditPIN_json = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "rentEditPIN");
        //    EditPIN = JsonSerializer.Deserialize<string>(rentEditPIN_json);

        //    string userEmail_json = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "userEmail");
        //    Email = JsonSerializer.Deserialize<string>(userEmail_json);
        //}
    }
}
