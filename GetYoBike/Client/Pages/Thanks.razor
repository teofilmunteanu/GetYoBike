@page "/thanks"
@using System.Text.Json;
@using GetYoBike.Shared.Models;
@using System.Globalization;
@inject Services.RentService RentSvc
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<div class="wraper">
    <div class="card">
        <div>
            <!-- Can use the class (location) to change the color -->
            <b>Thank you for renting a <span class="location">City</span> Bicycle!</b>
        </div><br><br>
        <div>
            To edit the renting detals, please use the following PIN after <br> accessing your rents list on the homepage through the email.
        </div><br>
        <div class="box">
            <!-- Can use the class (email/pin) to extract from database, or do as u want -->
            <div>Rent Made on Email: <span class="email">@Email</span></div><br>
            <div>Rent Edit PIN: <span class="pin">@EditPIN</span></div>
        </div>
        <div>
            <button class="home-button">Home</button>
        </div>
    </div>

</div>
@code {
    public string Email { get; set; }
    public string EditPIN { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //shouldnt store the whole rent cuz that gives away user info, 
        // so only store bike id and user id, then find rent based on that, 
        // to get the email of renter user and EditPIN

        //or BETTER:
        //from checkout, store in service bike id and user id
        //on initialize, if service info is not null (that happens only once),
        //search the rent by them, then store rent editpin and email in local storage
        //else, if service info is null, get editpin and email from local storage

        RentModel rent;
        UserModel user;
        //!!!!!!!!!!!!! pretty slow, maybe save the data directly in local?

        //If it's the first time the page is loaded, CurrentRent wouldn't be null
        if (RentSvc.CurrentRent != null)
        {
            string startDateTimeString = RentSvc.CurrentRent.StartDate.ToString("yyyy-MM-dd-HH-mm");
            string endDateTimeString = RentSvc.CurrentRent.EndDate.ToString("yyyy-MM-dd-HH-mm");
            int userId = RentSvc.CurrentRent.UserID;
            int bikeId = RentSvc.CurrentRent.BikeID;

            //search rent by BikeId, UserId, startdate, enddate
            rent = await Http.GetFromJsonAsync<RentModel>("api/Rents/getRentByDates?userId=" + userId + "&bikeId=" + bikeId + "&startDateTime=" + startDateTimeString + "&endDateTime=" + endDateTimeString);

            await JsRuntime.InvokeVoidAsync("localStorage.setItem", "rentId", JsonSerializer.Serialize(rent.Id));
        }
        else
        {
            string rentIdString = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "rentId");
            int rentId = int.Parse(rentIdString);
            rent = await Http.GetFromJsonAsync<RentModel>("api/Rents/" + rentId);
        }

        user = await Http.GetFromJsonAsync<UserModel>("api/Users/" + rent.UserID);

        Email = user.Email;
        EditPIN = rent.EditPIN;

        //string serializedRent = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "currentRent");
        //RentService.SetRent(JsonSerializer.Deserialize<RentModel>(serializedRent));
        //await JsRuntime.InvokeVoidAsync("localStorage.setItem", "currentRent", JsonSerializer.Serialize(rent));
    }
}
