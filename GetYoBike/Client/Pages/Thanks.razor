@page "/thanks"
@using System.Text.Json;
@using GetYoBike.Shared.Models;
@using System.Globalization;
@using System.Net;
@inject Services.RentService RentSvc
@inject IJSRuntime JsRuntime
@inject HttpClient Http


<div class="wraper">
    <div class="card">
        <div>
            <b>Thank you for renting a <span style="color:@TypeColor">@BikeTypeString</span> Bicycle!</b>
        </div><br><br>
        <div>
            To edit the renting detals, please use the following PIN after <br> accessing your rents list on the homepage through the email.
        </div><br>
        <div class="box">
            <div>Rent Made on Email: <span class="email">@Email</span></div><br>
            <div>Rent Edit PIN: <span class="pin">@EditPIN</span></div>
        </div>
        
        <button class="home-button" onclick="window.location.href='/';">Home</button>
       
    </div>

</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public int BikeTypeNr { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public int RentId { get; set; }


    public string BikeTypeString { get; set; } = "";
    public string TypeColor { get; set; } = "";

    public string EditPIN { get; set; } = "";
    public string Email { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        if(BikeTypeNr == 1)
        {
            BikeTypeString = "City";
            TypeColor = "#6594EF";
        }
        else if(BikeTypeNr == 2)
        {
            BikeTypeString = "Mountain";
            TypeColor = "#DB7A50";
        }
        else
        {
            BikeTypeString = "Default";
            TypeColor = "white";
        }

        await RetrieveRentData();

        await ClearSessionData();
    }

    private async Task RetrieveRentData()
    {
        try
        {
            RentModel? rent = await Http.GetFromJsonAsync<RentModel>("api/Rents/" + RentId);
            if (rent != null)
            {
                EditPIN = rent.EditPIN;

                UserModel? user = await Http.GetFromJsonAsync<UserModel>("api/Users/" + rent.UserID);
                if (user != null)
                {
                    Email = user.Email;
                }
                else
                {
                    throw new Exception("A problem occured during deserialization of user data.");
                }
            }
            else
            {
                throw new Exception("A problem occured during deserialization of rent data.");
            }
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.NotFound)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Rent data not found!");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "A problem occured during rent data retrieval.");
            }
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
       
    }

    private async Task ClearSessionData()
    {
        await JsRuntime.InvokeVoidAsync("sessionStorage.removeItem", "user");
        await JsRuntime.InvokeVoidAsync("sessionStorage.removeItem", "startDateTime");
        await JsRuntime.InvokeVoidAsync("sessionStorage.removeItem", "endDateTime");
        await JsRuntime.InvokeVoidAsync("sessionStorage.removeItem", "price");
    }
}
