@page "/checkout"

@inject IJSRuntime JsRuntime
@using GetYoBike.Shared.Models;
@using System.Globalization;
@using System.Text.Json;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject Services.RentService RentSvc
@inject Services.BikeService BikeSvc


<Header Color="@BikeTypeColor" Title="@BikeTypeTitle" Subtitle="Payment" />

<div class="grid-container">

    <div class="left">

        <form action="" method="post" id="formContainer">
            @*@onsubmit="ConfirmRent"*@
            <div class="username">
                <div class="cardnr-grid">
                    <label for="Card Number" class="formLabel">Card Number</label>
                    <br />
                    <input type="text" name="Card Number" id="cardnumber" class="cardnr" @bind="NrCard">
                </div>
                <div class="cvc-grid">
                    <label for="first Name" class="formLabel">CVC</label>
                    <br />
                    <input type="text" name="First Name" id="cvc" class="cvc" @bind="CardCVC">
                </div>
                <div class="month-grid">
                    <label for="month" class="formLabel">Card Expiration Date</label>
                    <br />
                    <input type="month" name="month" id="month" class="month" placeholder="month" @bind="CardExpDate">
                </div>
                <div class="cardname-grid">
                    <label for="cardname" class="formLabel">Name On Card</label>
                    <br />
                    <input type="cardname" name="cardname" id="cardname" class="cardname" @bind="CardName">
                </div>

                @*<button type="submit" >Submit</button>
                <br />*@
            </div>
        </form>
        <div class="backbutton" @onclick="BackToDetails">
            <i class="fa fa-arrow-left"></i><span> Rent Details</span>
        </div>
    </div>

    <div class="right-top">
        <img src="@SelectedImagePath" class="img-div">
    </div>

    <div class="right-bottom">
        <div class="checkoutItemsContainer">
            <total class="total">
                <span>Total: @Price lei</span>
            </total>
            <button class="button" @onclick="ConfirmRent">
                <span>Checkout </span>
            </button> 
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public int UserId{ get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public int BikeTypeNr { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "startDate")]
    public string StartDateString { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "endDate")]
    public string EndDateString { get; set; } = "";


    public string SelectedImagePath { get; set; } = "";
    public string BikeTypeColor { get; set; } = "";
    public string BikeTypeTitle { get; set; } = "";

    public decimal Price { get; set; } = 0;
    public string NrCard { get; set; } = "";
    public string CardCVC { get; set; } = "";
    public DateTime CardExpDate { get; set; }
    public string CardName { get; set; } = "";



    protected override void OnInitialized()
    {
        CardExpDate = DateTime.Now;

        switch (BikeTypeNr)
        {
            case 1:
                SelectedImagePath = "assets/rentCityBike.png";
                BikeTypeTitle = "Rent City Bike";
                BikeTypeColor = "#6594EF";
                break;
            case 2:
                SelectedImagePath = "assets/rentMountainBike.png";
                BikeTypeTitle = "Rent Mountain Bike";
                BikeTypeColor = "#DB7A50";
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await SetPrice();
    }

    private async Task SetPrice()
    {
        string priceString = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "price");
        Price = decimal.Parse(priceString);
    }

    private async Task<RentModel> CreateRent()
    {
        DateTime rentStartDate, rentEndDate;
        DateTime.TryParseExact(StartDateString, "yyyy-MM-dd-HH-mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out rentStartDate);
        DateTime.TryParseExact(EndDateString, "yyyy-MM-dd-HH-mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out rentEndDate);
        
        BikeModel? bike = await BikeSvc.GetAnAvailableBike(rentStartDate, rentEndDate, BikeTypeNr);
         
        RentModel rent = new RentModel()
            {
                UserID = this.UserId,
                BikeID = bike.Id,
                StartDate = rentStartDate,
                EndDate = rentEndDate,
                CardNr = this.NrCard.ToString(),
                CardCVC = this.CardCVC,
                CardExpMonth = CardExpDate.Month.ToString(),
                CardExpYear = CardExpDate.Year.ToString(),
                CardHolderName = this.CardName,
                EditPIN = ""
            };

        return rent;
    }

    public async Task ConfirmRent()
    {
        try
        {
            RentModel rent = await CreateRent();

            var response = await Http.PostAsJsonAsync("/api/Rents/", rent);

            if (response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                RentModel? createdRent = JsonSerializer.Deserialize<RentModel>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                if(createdRent != null)
                {
                    NavManager.NavigateTo($"/thanks/?type={BikeTypeNr}&id={createdRent.Id}");
                }
                else
                {
                    throw new Exception("A problem occured during deserialization of rent!");
                }  
            }
            else
            {
                throw new Exception(await response.Content.ReadAsStringAsync());
            }
        }
        catch(Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }  
    }

    public void BackToDetails()
    {
        NavManager.NavigateTo($"/details/{BikeTypeNr}");
    }
}
