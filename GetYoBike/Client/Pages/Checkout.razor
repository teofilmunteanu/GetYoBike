@page "/checkout"

@inject IJSRuntime JsRuntime
@using GetYoBike.Shared.Models;
@using System.Globalization;
@using System.Text.Json;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject Services.RentService RentSvc

@*<header>
    <b><b style="color:#6594EF;">Rent City Bike</b> - Payment</b>
</header>*@
<Header Color="#6594EF" Title="Rent City Bike" Subtitle="Payment" />
<div class="grid-container">

    <div class="left">

        <form action="" method="post" id="formContainer">
            @*@onsubmit="ConfirmRent"*@
            <div class="username">
                <div class="cardnr-grid">
                    <label for="Card Number" class="formLabel">Card Number</label>
                    <br />
                    <input type="text" name="Card Number" id="cardnumber" class="cardnr" @bind="NrCard">
                </div>
                <div class="firstname-grid">
                    <label for="first Name" class="formLabel">CVC</label>
                    <br />
                    <input type="text" name="First Name" id="firstname" class="cvc" @bind="CardCVC">
                </div>
                <div class="month-grid">
                    <label for="month" class="formLabel">Card Expiration Date</label>
                    <br />
                    <input type="month" name="month" id="month" class="month" placeholder="month" @bind="CardExpDate">
                </div>
                <div class="cardname-grid">
                    <label for="cardname" class="formLabel">Name On Card</label>
                    <br />
                    <input type="cardname" name="cardname" id="cardname" class="cardname" @bind="CardName">
                </div>

                @*<button type="submit" >Submit</button>
                <br />*@
            </div>
        </form>
        <div class="backbutton" @onclick="BackToDetails">
            <i class="fa fa-arrow-left"></i><span> Rent Details</span>
        </div>
    </div>

    <div class="right-top">
        <img src="@SelectedImagePath" class="img-div">
    </div>

    <div class="right-bottom">
        <div class="checkoutItemsContainer">
            <total class="total">
                <span>Total: @Price lei</span>
            </total>
            <button class="button" @onclick="ConfirmRent">
                <span>Checkout </span>
            </button> 
        </div>
    </div>
</div>

@*NavManager.NavigateTo($"/checkout?id={user.Id}&type={bikeTypeNr}&date={dateString}&duration={RentDuration}");*@

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public int UserId{ get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "type")]
    public int BikeTypeNr { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "startDate")]
    public string StartDateString { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "endDate")]
    public string EndDateString { get; set; }


    public string SelectedImagePath { get; set; } = "";

    public decimal Price { get; set; } = 0;

    public string NrCard { get; set; } = "";

    public string CardCVC { get; set; } = "";

    public string FirstName { get; set; } = "";

    public DateTime CardExpDate { get; set; }

    public string CardName { get; set; } = "";

    //public string message { get; set; } = "";

    protected override void OnInitialized()
    {
        CardExpDate = DateTime.Now;

        switch (BikeTypeNr)
        {
            case 1:
                SelectedImagePath = "assets/rentCityBike.png";
                break;
            case 2:
                SelectedImagePath = "assets/rentMountainBike.png";
                break;
        }

        SetPrice();
    }

    private void SetPrice()
    {
        Price = RentSvc.Price;
    }

    private async Task<BikeModel> GetAnAvailableBike()
    {
        List<BikeModel> availableBikes = await Http.GetFromJsonAsync<List<BikeModel>>("api/Bikes/availableBikesInInterval?startDateTime=" + StartDateString + "&endDateTime=" + EndDateString);

        int randBikeId = new Random().Next(0, availableBikes.Count - 1);
        BikeModel bike = availableBikes[randBikeId];

        return bike;
    }

    public async Task ConfirmRent()
    {
        try
        {
            BikeModel bike = await GetAnAvailableBike();

            DateTime rentStartDate, rentEndDate;
            DateTime.TryParseExact(StartDateString, "yyyy-MM-dd-HH-mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out rentStartDate);
            DateTime.TryParseExact(EndDateString, "yyyy-MM-dd-HH-mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out rentEndDate);

            RentModel rent = new RentModel()
                {
                    UserID = this.UserId,
                    BikeID = bike.Id,
                    StartDate = rentStartDate,
                    EndDate = rentEndDate,
                    CardNr = this.NrCard.ToString(),
                    CardCVC = this.CardCVC,
                    CardExpMonth = CardExpDate.Month.ToString(),
                    CardExpYear = CardExpDate.Year.ToString(),
                    CardHolderName = this.CardName,
                    EditPIN = ""
                };

            var response = await Http.PostAsJsonAsync("/api/Rents/", rent);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = response.Content.ReadAsStringAsync().Result;
                var createdRent = JsonSerializer.Deserialize<RentModel>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                NavManager.NavigateTo($"/thanks/?id={createdRent.Id}");
            }
            else
            {
                string message = response.Content.ReadAsStringAsync().Result;
                await JsRuntime.InvokeVoidAsync("alert", message);
            }
        }
        catch(HttpRequestException e)
        {
            if(e.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await JsRuntime.InvokeVoidAsync("alert", "No bikes available");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", e.Message);
            }    
        }
        catch(Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }

    public void BackToDetails()
    {
        //Eventually give the parameters back(two types of @page) -- save in local storage
        //$"/checkout?id={user.Id}&type={bikeTypeNr}&date={RentDate}&duration={RentDuration}"
        NavManager.NavigateTo($"/details/{BikeTypeNr}");
    }
}
