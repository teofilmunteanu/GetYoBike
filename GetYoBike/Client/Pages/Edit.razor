@page "/edit"

@inject IJSRuntime JsRuntime
@using GetYoBike.Shared.Models;
@using System.Net;
@using System.Text.Json;
@using System.Text;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject Services.RentService RentSvc
@inject Services.BikeService BikeSvc

@*check if edit pin was inserted*@
<Header Title="Edit Rent Details" />

<div class="grid-container">

    <div class="left-top">

        <form action="" method="post" id="formContainer">
            <div class="username">
                <div class="email-grid">
                    <label for="email" class="formLabel">Email</label>
                    <br />
                    <input type="email" name="email" id="email" class="email" @bind="Email">
                </div>
                <br/>
                <div class="dateStart-grid">
                    <label for="rent" class="formLabel">Start Date</label>
                    <br />
                    <input type="date" name="StartDate" class="rentDate"
                           @bind="RentStartDate" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))" />
                </div>
                <div class="timeStart-grid">
                    <label for="duration" class="formLabel">Start Time</label>
                    <br />
                    <input type="time" name="StartTime" class="rentTime" placeholder="hh"
                           @bind="RentStartTime" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))">
                </div>
                <div class="dateEnd-grid">
                    <label for="rent" class="formLabel">End Date</label>
                    <br />
                    <input type="date" name="EndDate" class="rentDate"
                           @bind="RentEndDate" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))"/>
                </div>
                <div class="timeEnd-grid">
                    <label for="duration" class="formLabel">End Time</label>
                    <br />
                    <input type="time" name="EndTime" class="rentTime" placeholder="hh"
                           @bind="RentEndTime" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))">
                </div>

                <br />
            </div>
        </form>
    </div>

    <div class="right">
        <div class="type">
            <span>Bike Type</span>
        </div>

        <div class="wrapper">
            <div class="tabs">
                <div class="tab">
                    <input type="radio" name="css-tabs" id="tab-1" class="tab-switch" checked="@(BikeType == TypesModel.city)" @onchange="@(async () => await SetBikeType(TypesModel.city))">
                    <label for="tab-1" class="tab-label"><img src="assets/buildings.png" class="img-tab"></label>
                    <div class="tab-content"><img src="assets/rentCityBike.png" class="img-div"></div>
                </div>
                <div class="tab">
                    <input type="radio" name="css-tabs" id="tab-2" class="tab-switch" checked="@(BikeType == TypesModel.mountain)" @onchange="@(async () => await SetBikeType(TypesModel.mountain))">
                    <label for="tab-2" class="tab-label"><img src="assets/mountain.png" class="img-tab"></label>
                    <div class="tab-content"><img src="assets/rentMountainBike.png" class="img-div"></div>
                </div>

            </div>
        </div>

    </div>

    <div class="left-bottom">
        <div class="flex-contianer">
            <button class="button" style="vertical-align:middle">
                <span>Cancel Rent</span>
            </button>
            <div class="total">
                <span>Total: @Price lei</span>
            </div>
            <button class="buttonc" style="vertical-align:middle" @onclick=ChangeRentData>
                <span>Confirm Changes</span>
            </button>
        </div>
    </div>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "rentId")]
    public int RentId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string Email { get; set; } = "";

    public decimal Price { get; set; }
    public TypesModel BikeType { get; set; }

    public DateOnly RentStartDate { get; set; }
    public DateOnly RentEndDate { get; set; }
    public TimeOnly RentStartTime { get; set; }
    public TimeOnly RentEndTime { get; set; }

    DateTime dateTimeStart;
    DateTime dateTimeEnd;

    RentModel? currentRent;
    UserModel? currentUser;
    BikeModel? currentBike;
    BikeTypeModel? currentBikeType;
    TypesModel initialBikeType;
    string initialEmail = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchRentFormData();
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }

    //has to have enum bike type as parameter for the binded type change
    private async Task SetBikeType(TypesModel newBikeType)
    {
        var bikeTypeResponse = await Http.GetAsync("api/BikeTypes/getByName/" + newBikeType);
        if (bikeTypeResponse.IsSuccessStatusCode)
        {
            BikeType = newBikeType;

            string bikeTypeResponseJson = await bikeTypeResponse.Content.ReadAsStringAsync();
            currentBikeType = JsonSerializer.Deserialize<BikeTypeModel>(bikeTypeResponseJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            if (currentBikeType != null)
            {
                SetPrice(RentSvc.DurationHours);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "A problem occured during deserialization of the bike type.");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "A problem occured during bike type retrieval! Cannot set price.");
        }
    }

    private void SetDates(DateOnly rentStartDate, TimeOnly rentStartTime, DateOnly rentEndDate, TimeOnly rentEndTime)
    {
        dateTimeStart = rentStartDate.ToDateTime(new TimeOnly(rentStartTime.Hour, rentStartTime.Minute, 0));
        dateTimeEnd = rentEndDate.ToDateTime(new TimeOnly(rentEndTime.Hour, rentEndTime.Minute, 0));
        RentSvc.SetDuration(dateTimeStart, dateTimeEnd);

        SetPrice(RentSvc.DurationHours);
    }

    private void SetPrice(decimal durationHours)
    {
        if (currentBikeType != null)
        {
            RentSvc.CalculatePrice(durationHours, currentBikeType.Price);
            Price = RentSvc.Price;
        }
    }

    private void SetInitialRentData(string email, TypesModel BikeType)
    {
        initialBikeType = BikeType;
        initialEmail = email;
    }

    private async Task FetchRentFormData()
    {
        try
        {
            currentRent = await Http.GetFromJsonAsync<RentModel>($"api/Rents/{RentId}");
            if (currentRent != null)
            {
                currentBike = await Http.GetFromJsonAsync<BikeModel>($"api/Bikes/{currentRent.BikeID}");

                if (currentBike != null)
                {
                    currentBikeType = await Http.GetFromJsonAsync<BikeTypeModel>("api/BikeTypes/" + currentBike.TypeId);
                    currentUser = await Http.GetFromJsonAsync<UserModel>($"api/Users/{currentRent.UserID}");

                    if (currentUser != null && currentBikeType != null)
                    {
                        await SetBikeType(currentBikeType.Type);
                        SetInitialRentData(currentUser.Email, currentBikeType.Type);
                    }

                    RentStartDate = DateOnly.FromDateTime(currentRent.StartDate);
                    RentEndDate = DateOnly.FromDateTime(currentRent.EndDate);
                    RentStartTime = TimeOnly.FromDateTime(currentRent.StartDate);
                    RentEndTime = TimeOnly.FromDateTime(currentRent.EndDate);

                    SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime);
                }
            }
        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == HttpStatusCode.NotFound)
            {
                throw new Exception("Rent data not found!");
            }
            else
            {
                throw new Exception("A problem occured during the retrieval of current rent data.");
            }
        }
    }

    private async Task ChangeRentData()
    {
        if (currentRent != null && currentUser != null && currentBike != null)
        {
            try
            {
                currentRent.StartDate = dateTimeStart;
                currentRent.EndDate = dateTimeEnd;

                if (initialBikeType != BikeType)
                {
                    BikeModel? bike = await BikeSvc.GetAnAvailableBike(dateTimeStart, dateTimeEnd, BikeType);
                    currentRent.BikeID = bike.Id;
                }

                //if the email is changed to one not owned by a user, create a user, otherwise, give this rent to that user
                if (initialEmail != Email)
                {
                    var getUserResponse = await Http.GetAsync("api/Users/FindUserByEmail/" + Email);

                    if (getUserResponse.StatusCode == HttpStatusCode.NotFound)
                    {
                        UserModel newUser = new UserModel
                            {
                                Email = this.Email,
                                LastName = currentUser.LastName,
                                FirstName = currentUser.FirstName,
                                Age = currentUser.Age
                            };
                        //create a user by using the old user details
                        await Http.PostAsJsonAsync($"api/Users/", newUser);
                    }
                    else if (getUserResponse.IsSuccessStatusCode)
                    {
                        var getUserResponseContent = await getUserResponse.Content.ReadAsStringAsync();
                        UserModel? anotherUser = JsonSerializer.Deserialize<UserModel>(getUserResponseContent, new JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true
                            });
                        //give the rent to the other user that exists
                        if (anotherUser != null)
                        {
                            currentRent.UserID = anotherUser.Id;
                        }
                        else
                        {
                            throw new Exception("Failed to load the information of the new user!");
                        }
                    }
                    else
                    {
                        throw new Exception("An unexpected error occured while searching the user: " + await getUserResponse.Content.ReadAsStringAsync());
                    }
                }


                await Http.PutAsJsonAsync($"api/Rents/{currentRent.Id}", currentRent);
                NavManager.NavigateTo("/");
            }
            catch(Exception e)
            {
                await JsRuntime.InvokeVoidAsync("alert", e.Message);
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "The rent details failed to load.");
        }
    }

}
