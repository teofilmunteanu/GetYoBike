@page "/edit"

@inject IJSRuntime JsRuntime
@using GetYoBike.Shared.Models;
@using System.Net;
@using System.Text.Json;
@using System.Text;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject Services.RentService RentSvc
@inject Services.BikeService BikeSvc

@*check if edit pin was inserted*@
<Header Title="Edit Rent Details" />

<div class="grid-container">

    <div class="left-top">

        <form action="" method="post" id="formContainer">
            <div class="username">
                <div class="email-grid">
                    <label for="email" class="formLabel">Email</label>
                    <br />
                    <input type="email" name="email" id="email" class="email" @bind="Email">
                </div>
                <br/>
                <div class="dateStart-grid">
                    <label for="rent" class="formLabel">Start Date</label>
                    <br />
                    <input type="date" name="StartDate" class="rentDate"
                           @bind="RentStartDate" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))" />
                </div>
                <div class="timeStart-grid">
                    <label for="duration" class="formLabel">Start Time</label>
                    <br />
                    <input type="time" name="StartTime" class="rentTime" placeholder="hh"
                           @bind="RentStartTime" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))">
                </div>
                <div class="dateEnd-grid">
                    <label for="rent" class="formLabel">End Date</label>
                    <br />
                    <input type="date" name="EndDate" class="rentDate"
                           @bind="RentEndDate" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))"/>
                </div>
                <div class="timeEnd-grid">
                    <label for="duration" class="formLabel">End Time</label>
                    <br />
                    <input type="time" name="EndTime" class="rentTime" placeholder="hh"
                           @bind="RentEndTime" @bind:after="@(()=>SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime))">
                </div>

                <br />
            </div>
        </form>
    </div>

    <div class="right">
        <div class="type">
            <span>Bike Type</span>
        </div>

        <div class="wrapper">
            <div class="tabs">
                <div class="tab">
                    <input type="radio" name="css-tabs" id="tab-1" class="tab-switch" checked="@(BikeTypeNr == 1)" @onchange="@(async () => {BikeTypeNr = 1; await SetBikeType(BikeTypeNr);})">
                    <label for="tab-1" class="tab-label"><img src="assets/buildings.png" class="img-tab"></label>
                    <div class="tab-content"><img src="assets/rentCityBike.png" class="img-div"></div>
                </div>
                <div class="tab">
                    <input type="radio" name="css-tabs" id="tab-2" class="tab-switch" checked="@(BikeTypeNr == 2)" @onchange="@(async () => {BikeTypeNr = 2; await SetBikeType(BikeTypeNr);})">
                    <label for="tab-2" class="tab-label"><img src="assets/mountain.png" class="img-tab"></label>
                    <div class="tab-content"><img src="assets/rentMountainBike.png" class="img-div"></div>
                </div>

            </div>
        </div>

    </div>

    <div class="left-bottom">
        <div class="flex-contianer">
            <button class="button" style="vertical-align:middle">
                <span>Cancel Rent</span>
            </button>
            <div class="total">
                <span>Total: @Price lei</span>
            </div>
            <button class="buttonc" style="vertical-align:middle" @onclick=ChangeRentData>
                <span>Confirm Changes</span>
            </button>
        </div>
    </div>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "rentId")]
    public int RentId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string Email { get; set; } = "";

    public decimal Price { get; set; }
    public int BikeTypeNr { get; set; }

    public DateOnly RentStartDate { get; set; }
    public DateOnly RentEndDate { get; set; }
    public TimeOnly RentStartTime { get; set; }
    public TimeOnly RentEndTime { get; set; }

    decimal pricePerH;
    DateTime dateTimeStart;
    DateTime dateTimeEnd;

    RentModel? currentRent;
    UserModel? currentUser;
    BikeModel? currentBike;
    int initialBikeTypeNr;
    string initialEmail = "";


    private async Task SetBikeType(int BikeTypeNr)
    {
        BikeTypeModel? bikeType = await Http.GetFromJsonAsync<BikeTypeModel>("api/BikeTypes/" + BikeTypeNr);
        pricePerH = bikeType.Price;

        SetPrice(RentSvc.DurationHours, pricePerH);
    }

    private void SetDates(DateOnly rentStartDate, TimeOnly rentStartTime, DateOnly rentEndDate, TimeOnly rentEndTime)
    {
        dateTimeStart = rentStartDate.ToDateTime(new TimeOnly(rentStartTime.Hour, rentStartTime.Minute, 0));
        dateTimeEnd = rentEndDate.ToDateTime(new TimeOnly(rentEndTime.Hour, rentEndTime.Minute, 0));
        RentSvc.SetDuration(dateTimeStart, dateTimeEnd);

        SetPrice(RentSvc.DurationHours, pricePerH);
    }

    private void SetPrice(decimal durationHours, decimal pricePerH)
    {
        RentSvc.CalculatePrice(durationHours, pricePerH);
        Price = RentSvc.Price;
    }

    private void SetInitialRentData(string email, int bikeTypeNr)
    {
        initialBikeTypeNr = bikeTypeNr;
        initialEmail = email;
    }

    private async Task FetchRentFormData()
    {
        currentRent = await Http.GetFromJsonAsync<RentModel>($"api/Rents/{RentId}");
        currentBike = await Http.GetFromJsonAsync<BikeModel>($"api/Bikes/{currentRent.BikeID}");
        BikeTypeNr = currentBike.TypeId;

        RentStartDate = DateOnly.FromDateTime(currentRent.StartDate);
        RentEndDate = DateOnly.FromDateTime(currentRent.EndDate);
        RentStartTime = TimeOnly.FromDateTime(currentRent.StartDate);
        RentEndTime = TimeOnly.FromDateTime(currentRent.EndDate);

        await SetBikeType(BikeTypeNr);
        SetDates(RentStartDate, RentStartTime, RentEndDate, RentEndTime);

        currentUser = await Http.GetFromJsonAsync<UserModel>($"api/Users/{currentRent.UserID}");
        SetInitialRentData(currentUser.Email, currentBike.TypeId);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchRentFormData();
        }
        catch(HttpRequestException e)
        {

        }
    }

    private async Task ChangeRentData()
    {
        if (currentRent != null && currentUser != null && currentBike != null)
        {
            try
            {
                currentRent.StartDate = dateTimeStart;
                currentRent.EndDate = dateTimeEnd;

                if (initialBikeTypeNr != BikeTypeNr)
                {
                    BikeModel? bike = await BikeSvc.GetAnAvailableBike(dateTimeStart, dateTimeEnd, BikeTypeNr);
                    currentRent.BikeID = bike.Id;
                }

                //if the email is changed to one not owned by a user, create a user, otherwise, give this rent to that user
                if (initialEmail != Email)
                {
                    var getUserResponse = await Http.GetAsync("api/Users/FindUserByEmail/" + Email);

                    if (getUserResponse.StatusCode == HttpStatusCode.NotFound)
                    {
                        UserModel newUser = new UserModel
                            {
                                Email = this.Email,
                                LastName = currentUser.LastName,
                                FirstName = currentUser.FirstName,
                                Age = currentUser.Age
                            };
                        //create a user by using the old user details
                        await Http.PostAsJsonAsync($"api/Users/", newUser);
                    }
                    else if (getUserResponse.IsSuccessStatusCode)
                    {
                        var getUserResponseContent = await getUserResponse.Content.ReadAsStringAsync();
                        UserModel? anotherUser = JsonSerializer.Deserialize<UserModel>(getUserResponseContent, new JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true
                            });
                        //give the rent to the other user that exists
                        if (anotherUser != null)
                        {
                            currentRent.UserID = anotherUser.Id;
                        }
                        else
                        {
                            throw new Exception("Failed to load the information of the new user!");
                        }
                    }
                    else
                    {
                        throw new Exception("An unexpected error occured while searching the user: " + await getUserResponse.Content.ReadAsStringAsync());
                    }
                }
                

                await Http.PutAsJsonAsync($"api/Rents/{currentRent.Id}", currentRent);
            }
            catch(Exception e)
            {
                await JsRuntime.InvokeVoidAsync("alert", e.Message);
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "The rent details failed to load.");
        }
    }

}
